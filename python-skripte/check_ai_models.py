#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test-Skript zur √úberpr√ºfung verf√ºgbarer AI-Modelle f√ºr Vogelarten-Erkennung
"""

import paramiko
import sys
import os
from config import config

def check_remote_ai_models():
    """Pr√ºft verf√ºgbare AI-Modelle auf dem Raspberry Pi"""
    
    # SSH-Verbindungsdetails
    remote_host = config.get_remote_host_config()
    
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(remote_host['hostname'], username=remote_host['username'], key_filename=remote_host['key_filename'])
        
        print("üîç Suche nach verf√ºgbaren AI-Modellen auf dem Raspberry Pi...")
        print("=" * 60)
        
        # Standard Hailo-Modelle pr√ºfen
        print("\nüìÇ Standard Hailo-Modelle (/usr/share/rpi-camera-assets/):")
        stdin, stdout, stderr = ssh.exec_command("ls -la /usr/share/rpi-camera-assets/ | grep -E '\\.json$|\\.hef$'")
        output = stdout.read().decode()
        if output:
            print(output)
        else:
            print("  Keine JSON/HEF-Dateien gefunden.")
        
        # Nach Vogel-spezifischen Modellen suchen
        print("\nüê¶ Suche nach Vogel-spezifischen Modellen:")
        search_commands = [
            "find /usr/share -name '*bird*' -o -name '*aves*' -o -name '*ornith*' 2>/dev/null",
            "find /opt -name '*bird*' -o -name '*aves*' -o -name '*ornith*' 2>/dev/null",
            "find /home -name '*bird*' -o -name '*aves*' -o -name '*ornith*' 2>/dev/null | head -10"
        ]
        
        for cmd in search_commands:
            stdin, stdout, stderr = ssh.exec_command(cmd)
            output = stdout.read().decode().strip()
            if output:
                print(f"  Gefunden: {output}")
        
        # Verf√ºgbare Hardware pr√ºfen
        print("\nüîß Hardware-Information:")
        stdin, stdout, stderr = ssh.exec_command("cat /proc/device-tree/model")
        model = stdout.read().decode().strip()
        print(f"  Raspberry Pi Modell: {model}")
        
        # Hailo-Treiber pr√ºfen
        stdin, stdout, stderr = ssh.exec_command("lsmod | grep hailo")
        hailo_driver = stdout.read().decode().strip()
        if hailo_driver:
            print(f"  Hailo-Treiber: ‚úÖ Geladen")
            print(f"    {hailo_driver}")
        else:
            print(f"  Hailo-Treiber: ‚ùå Nicht gefunden")
        
        # libcamera-vid mit Hailo-Support pr√ºfen
        print("\nüìπ libcamera-vid Hailo-Support:")
        stdin, stdout, stderr = ssh.exec_command("libcamera-vid --help | grep -i post-process")
        help_output = stdout.read().decode().strip()
        if help_output:
            print("  ‚úÖ --post-process-file Parameter verf√ºgbar")
        else:
            print("  ‚ùå Kein Post-Processing Support erkannt")
        
        ssh.close()
        
    except Exception as e:
        print(f"‚ùå Fehler bei der Verbindung: {e}")
        return False
    
    return True

def suggest_models():
    """Gibt Empfehlungen f√ºr Vogelarten-Modelle"""
    print("\n" + "=" * 60)
    print("üí° EMPFEHLUNGEN F√úR VOGELARTEN-ERKENNUNG:")
    print("=" * 60)
    
    print("\n1Ô∏è‚É£ SOFORT VERF√úGBAR:")
    print("   ‚Ä¢ Standard YOLOv8: Erkennt 'bird' (allgemein)")
    print("   ‚Ä¢ Aufruf: --ai-modul on --ai-model yolov8")
    
    print("\n2Ô∏è‚É£ ERWEITERTE OPTIONEN:")
    print("   ‚Ä¢ BirdNET f√ºr Raspberry Pi installieren")
    print("   ‚Ä¢ iNaturalist Vision Modell adaptieren")
    print("   ‚Ä¢ Eigenes YOLOv8 f√ºr lokale Vogelarten trainieren")
    
    print("\n3Ô∏è‚É£ EMPFOHLENE VOGELARTEN F√úR TRAINING:")
    print("   H√§ufige deutsche Gartenv√∂gel:")
    print("   ‚Ä¢ Amsel, Blaumeise, Kohlmeise, Rotkehlchen")
    print("   ‚Ä¢ Buchfink, Gr√ºnfink, Haussperling")
    print("   ‚Ä¢ Star, Elster, Rabenkr√§he")
    
    print("\n4Ô∏è‚É£ N√ÑCHSTE SCHRITTE:")
    print("   1. Testen Sie erst das Standard-Modell")
    print("   2. Sammeln Sie Trainingsdaten aus Ihrem Vogelhaus")
    print("   3. Trainieren Sie ein spezifisches Modell")
    print("   4. Siehe: AI-MODELLE-VOGELARTEN.md")

def main():
    """Hauptfunktion"""
    print("üê¶ AI-Modell Checker f√ºr Vogelarten-Erkennung")
    print("=" * 50)
    
    # Konfiguration validieren
    config_errors = config.validate_config()
    if config_errors:
        print("‚ö†Ô∏è Konfigurationsprobleme gefunden:")
        for error in config_errors:
            print(f"  - {error}")
        print("\nBitte konfigurieren Sie das System entsprechend der README.md")
        return 1
    
    # Remote-Modelle pr√ºfen
    if check_remote_ai_models():
        suggest_models()
        return 0
    else:
        print("\n‚ùå Konnte Remote-System nicht erreichen.")
        return 1

if __name__ == "__main__":
    sys.exit(main())